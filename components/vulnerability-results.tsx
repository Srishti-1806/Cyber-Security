"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Shield, AlertTriangle, CheckCircle, XCircle, Info } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"

interface Vulnerability {
  id: string
  name: string
  severity: "critical" | "high" | "medium" | "low"
  category: string
  status: "open" | "fixed" | "in-progress" | "false-positive"
  description: string
  remediation: string
  cve?: string
}

export function VulnerabilityResults() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Simulate loading data
    setTimeout(() => {
      setVulnerabilities([
        {
          id: "vuln-001",
          name: "SQL Injection in Login Form",
          severity: "critical",
          category: "Injection",
          status: "open",
          description:
            "The login form is vulnerable to SQL injection attacks, allowing attackers to bypass authentication and access sensitive data.",
          remediation:
            "Use parameterized queries or prepared statements instead of string concatenation for SQL queries.",
          cve: "CVE-2022-1234",
        },
        {
          id: "vuln-002",
          name: "Outdated SSL/TLS Version",
          severity: "high",
          category: "Cryptography",
          status: "in-progress",
          description: "The server is using an outdated SSL/TLS version that has known vulnerabilities.",
          remediation: "Upgrade to TLS 1.3 and disable older protocols.",
        },
        {
          id: "vuln-003",
          name: "Cross-Site Scripting (XSS)",
          severity: "high",
          category: "XSS",
          status: "open",
          description:
            "The comment section is vulnerable to stored XSS attacks, allowing attackers to inject malicious scripts.",
          remediation: "Implement proper input validation and output encoding.",
          cve: "CVE-2022-5678",
        },
        {
          id: "vuln-004",
          name: "Missing HTTP Security Headers",
          severity: "medium",
          category: "Configuration",
          status: "fixed",
          description:
            "The application is missing important security headers such as Content-Security-Policy and X-XSS-Protection.",
          remediation: "Configure the web server to include all recommended security headers.",
        },
        {
          id: "vuln-005",
          name: "Insecure Direct Object Reference",
          severity: "medium",
          category: "Access Control",
          status: "open",
          description:
            "The application allows direct access to resources via ID parameters without proper authorization checks.",
          remediation: "Implement proper access control checks for all resource requests.",
        },
        {
          id: "vuln-006",
          name: "Default Admin Credentials",
          severity: "critical",
          category: "Authentication",
          status: "false-positive",
          description: "The system is using default admin credentials that are widely known.",
          remediation: "Change default credentials and implement a strong password policy.",
        },
      ])
      setLoading(false)
    }, 2000)
  }, [])

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <XCircle className="h-4 w-4 text-destructive" />
      case "high":
        return <AlertTriangle className="h-4 w-4 text-orange-500" />
      case "medium":
        return <Info className="h-4 w-4 text-amber-500" />
      case "low":
        return <CheckCircle className="h-4 w-4 text-primary" />
      default:
        return <Info className="h-4 w-4" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-destructive text-destructive-foreground"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-amber-500 text-white"
      case "low":
        return "bg-primary text-primary-foreground"
      default:
        return "bg-muted text-muted-foreground"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return "bg-destructive/20 text-destructive border-destructive/50"
      case "in-progress":
        return "bg-amber-500/20 text-amber-500 border-amber-500/50"
      case "fixed":
        return "bg-primary/20 text-primary border-primary/50"
      case "false-positive":
        return "bg-muted/20 text-muted-foreground border-muted/50"
      default:
        return "bg-muted text-muted-foreground"
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.1 }}
    >
      <Card className="cyber-border overflow-hidden">
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="flex items-center gap-2 text-sm font-medium">
            <Shield className="h-4 w-4 text-primary" />
            Vulnerability Scan Results
          </CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex h-[400px] items-center justify-center">
              <div className="h-16 w-16 animate-spin rounded-full border-4 border-primary border-t-transparent" />
            </div>
          ) : (
            <div className="space-y-4">
              <div className="flex flex-wrap gap-3">
                <Badge variant="outline" className="bg-destructive/20 text-destructive border-destructive/50">
                  Critical: {vulnerabilities.filter((v) => v.severity === "critical").length}
                </Badge>
                <Badge variant="outline" className="bg-orange-500/20 text-orange-500 border-orange-500/50">
                  High: {vulnerabilities.filter((v) => v.severity === "high").length}
                </Badge>
                <Badge variant="outline" className="bg-amber-500/20 text-amber-500 border-amber-500/50">
                  Medium: {vulnerabilities.filter((v) => v.severity === "medium").length}
                </Badge>
                <Badge variant="outline" className="bg-primary/20 text-primary border-primary/50">
                  Low: {vulnerabilities.filter((v) => v.severity === "low").length}
                </Badge>
              </div>

              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[100px]">Severity</TableHead>
                    <TableHead>Vulnerability</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead className="w-[100px]">Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {vulnerabilities.map((vuln) => (
                    <TableRow key={vuln.id}>
                      <TableCell>
                        <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                      </TableCell>
                      <TableCell className="font-medium">{vuln.name}</TableCell>
                      <TableCell>{vuln.category}</TableCell>
                      <TableCell>
                        <Badge variant="outline" className={getStatusColor(vuln.status)}>
                          {vuln.status}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              <Accordion type="single" collapsible className="w-full">
                {vulnerabilities.map((vuln) => (
                  <AccordionItem key={vuln.id} value={vuln.id}>
                    <AccordionTrigger className="flex items-center gap-2 text-sm">
                      {getSeverityIcon(vuln.severity)}
                      {vuln.name}
                      {vuln.cve && (
                        <Badge variant="outline" className="ml-2 text-xs">
                          {vuln.cve}
                        </Badge>
                      )}
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="space-y-3 p-2">
                        <div>
                          <h4 className="text-sm font-medium">Description</h4>
                          <p className="text-sm text-muted-foreground">{vuln.description}</p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium">Remediation</h4>
                          <p className="text-sm text-muted-foreground">{vuln.remediation}</p>
                        </div>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  )
}
