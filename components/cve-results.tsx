"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Database, ExternalLink, AlertTriangle, Calendar, Tag } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"

interface CVE {
  id: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  published: string
  updated: string
  score: number
  description: string
  affected: string[]
}

export function CveResults() {
  const [cves, setCves] = useState<CVE[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Simulate loading data
    setTimeout(() => {
      setCves([
        {
          id: "CVE-2023-1234",
          title: "Remote Code Execution in Apache Struts",
          severity: "critical",
          published: "2023-05-12",
          updated: "2023-06-03",
          score: 9.8,
          description:
            "A remote code execution vulnerability exists in Apache Struts versions 2.0.0 to 2.5.30 due to improper input validation.",
          affected: ["Apache Struts 2.0.0-2.5.30"],
        },
        {
          id: "CVE-2023-5678",
          title: "SQL Injection in WordPress Plugin",
          severity: "high",
          published: "2023-07-22",
          updated: "2023-08-15",
          score: 8.4,
          description:
            "A SQL injection vulnerability in the XYZ WordPress plugin allows attackers to execute arbitrary SQL commands.",
          affected: ["WordPress XYZ Plugin 1.2.0-1.5.3"],
        },
        {
          id: "CVE-2023-9012",
          title: "Authentication Bypass in OpenSSL",
          severity: "critical",
          published: "2023-03-18",
          updated: "2023-04-02",
          score: 9.1,
          description:
            "An authentication bypass vulnerability in OpenSSL allows attackers to gain unauthorized access to protected resources.",
          affected: ["OpenSSL 1.1.1-1.1.1k"],
        },
        {
          id: "CVE-2022-3456",
          title: "Cross-Site Scripting in jQuery",
          severity: "medium",
          published: "2022-11-05",
          updated: "2023-01-20",
          score: 6.5,
          description:
            "A cross-site scripting vulnerability in jQuery allows attackers to inject malicious scripts into web pages.",
          affected: ["jQuery 1.12.0-3.5.0"],
        },
        {
          id: "CVE-2022-7890",
          title: "Denial of Service in Nginx",
          severity: "medium",
          published: "2022-09-14",
          updated: "2022-10-30",
          score: 6.8,
          description:
            "A denial of service vulnerability in Nginx allows attackers to cause a service disruption by sending specially crafted requests.",
          affected: ["Nginx 1.18.0-1.20.2"],
        },
      ])
      setLoading(false)
    }, 2000)
  }, [])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-destructive text-destructive-foreground"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-amber-500 text-white"
      case "low":
        return "bg-primary text-primary-foreground"
      default:
        return "bg-muted text-muted-foreground"
    }
  }

  const getScoreColor = (score: number) => {
    if (score >= 9.0) return "text-destructive"
    if (score >= 7.0) return "text-orange-500"
    if (score >= 4.0) return "text-amber-500"
    return "text-primary"
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.1 }}
    >
      <Card className="cyber-border overflow-hidden">
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="flex items-center gap-2 text-sm font-medium">
            <Database className="h-4 w-4 text-primary" />
            CVE Database Results
          </CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex h-[400px] items-center justify-center">
              <div className="h-16 w-16 animate-spin rounded-full border-4 border-primary border-t-transparent" />
            </div>
          ) : (
            <div className="space-y-6">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[120px]">CVE ID</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead className="w-[100px]">Severity</TableHead>
                    <TableHead className="w-[100px]">CVSS Score</TableHead>
                    <TableHead className="w-[120px]">Published</TableHead>
                    <TableHead className="w-[80px]">Details</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {cves.map((cve) => (
                    <TableRow key={cve.id}>
                      <TableCell className="font-mono text-xs">{cve.id}</TableCell>
                      <TableCell className="font-medium">{cve.title}</TableCell>
                      <TableCell>
                        <Badge className={getSeverityColor(cve.severity)}>{cve.severity}</Badge>
                      </TableCell>
                      <TableCell className={`font-bold ${getScoreColor(cve.score)}`}>{cve.score.toFixed(1)}</TableCell>
                      <TableCell className="text-xs text-muted-foreground">{cve.published}</TableCell>
                      <TableCell>
                        <Button variant="ghost" size="icon" className="h-8 w-8">
                          <ExternalLink className="h-4 w-4" />
                          <span className="sr-only">View Details</span>
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              {cves.length > 0 && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.3 }}
                  className="rounded-lg border border-border/50 p-4"
                >
                  <h3 className="flex items-center gap-2 text-lg font-medium">
                    <AlertTriangle className="h-5 w-5 text-destructive" />
                    {cves[0].id}: {cves[0].title}
                  </h3>

                  <div className="mt-2 flex flex-wrap gap-2">
                    <Badge variant="outline" className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      Published: {cves[0].published}
                    </Badge>
                    <Badge variant="outline" className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      Updated: {cves[0].updated}
                    </Badge>
                    <Badge className={getSeverityColor(cves[0].severity)}>CVSS: {cves[0].score.toFixed(1)}</Badge>
                  </div>

                  <p className="mt-3 text-sm text-muted-foreground">{cves[0].description}</p>

                  <div className="mt-3">
                    <h4 className="text-sm font-medium">Affected Products:</h4>
                    <div className="mt-1 flex flex-wrap gap-2">
                      {cves[0].affected.map((product, index) => (
                        <Badge key={index} variant="outline" className="flex items-center gap-1">
                          <Tag className="h-3 w-3" />
                          {product}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <div className="mt-4 flex justify-end">
                    <Button variant="outline" size="sm" className="gap-2">
                      <ExternalLink className="h-3 w-3" />
                      View Full Details
                    </Button>
                  </div>
                </motion.div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  )
}
